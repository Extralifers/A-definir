//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.IO;

public class LevelGenerator : MonoBehaviour {
	
	//public static List<string> nameRooms = new List<string>();
	//public static List<int> inCodes = new List<int>();
	//public static List<int> outCodes = new List<int>();
	public static List<GameObject> rooms = new List<GameObject>();

	public int maxSize = 10;
	// Use this for initialization
	void Start () {
		//buildRoomMap ();
		//rooms = Room.GetAllRooms ();

		Room currentRoom = Room.GetRdm(Room.GetInitRooms());

		float nextPos = 45.85f;
		rooms.Add((GameObject) Instantiate(Resources.Load(currentRoom.FileName), new Vector3(nextPos, 0), new Quaternion(0, 0, 0, 0))); 
		int currentSize = 1;

		while ( currentSize < maxSize)
		{
			List<int> rList = new List<int> ();
			if (currentSize == maxSize - 1)
				currentRoom = Room.GetRdm (currentRoom.GetPossibleClosedRooms ());
			else 
				currentRoom = Room.GetRdm (currentRoom.GetPossibleOpenRooms ());


			rooms.Add((GameObject) Instantiate(Resources.Load(currentRoom.FileName), new Vector3(nextPos, 0), new Quaternion(0, 0, 0, 0))); 


			nextPos += 45.85f; //47f
			currentSize++;
		}
		
	}
	
	// Update is called once per frame
	void Update () {
		
	}

	/*
	 * Devuelve una habitación con salida
	 */
	/*public static List<int> getMedInRoom(int inCode)
	{
		List<int> roomList = new List<int> ();
		for(int i=0;i<nameRooms.Count;i++){
			if(inCodes[i]==inCode && outCodes[i]!=0)
				roomList.Add(i);
		}
		return roomList;
	}*/

	/*
	 * Devuelve una habitación sin salida en función de una entrada
	 */
	/*public static List<int> getLastInRoom(int inCode)
	{

		List<int> roomList = new List<int> ();
		for(int i=0;i<nameRooms.Count;i++){
			if(inCodes[i]==inCode && outCodes[i]==0)
				roomList.Add(i);
		}
		return roomList;
	}*/

	/*
		Recoge todas los prefabs de rooms y los mete en la lista de nombres, entradas y salidas nameRooms, inCodes, outCodes
	*/
	/*public static void buildRoomMap()
	{
		string path = Application.dataPath + @"/Resources/rooms";
		var info = new DirectoryInfo(path);
		var fileInfo = info.GetFiles("*.prefab");
		string[] data;
		foreach (var file in fileInfo)
		{
			data = file.Name.Split('_');
			string[] namefile = file.Name.Split('.');
			nameRooms.Add("rooms/"+namefile[0]);
			inCodes.Add(int.Parse(data[1]));
			outCodes.Add (int.Parse(data[2]));
		}
	}*/
}

